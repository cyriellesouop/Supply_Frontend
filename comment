La verifyPhoneNumber()méthode qui se trouve à l'intérieur de la firebase_authdépendance générera l'otp et l'enverra à l'appareil. 
Il faut plusieurs rappels, le premier verificationCompletedsera invoqué dans les deux cas suivants :


1 - Vérification instantanée. Dans certains cas, le numéro de téléphone peut être vérifié instantanément sans qu'il soit nécessaire d'envoyer ou de saisir un code de vérification.

2 - Récupération automatique. Sur certains appareils, les services Google Play peuvent détecter automatiquement le SMS de vérification entrant et effectuer la vérification sans intervention de l'utilisateur.

Le rappel prendra a PhoneAuthCredentialcomme argument, qui contiendra le smsCode, puis en utilisant setState()nous mettrons à jour la valeur du TextFormFieldcontenant le otp.

Ensuite, puisque l'utilisateur est déjà connecté, nous utilisons linkWithCredential()pour lier à la fois les informations d'identification du téléphone et d'un autre fournisseur,
 et si cela génère l'erreur e.code == 'provider-already-linked', le téléphone sera déjà lié, nous nous connectons donc simplement et naviguons vers le fichier HomePage().

Le verificationFailedrappel sera appelé chaque fois qu'une erreur se produit, nous utilisons donc le showMessage()pour montrer l'erreur à l'utilisateur.

Le codeSentrappel sera appelé lorsque le code de vérification par SMS aura été envoyé au numéro de téléphone fourni. Ensuite, nous enregistrons le verificationIdafin que nous puissions construire un identifiant plus tard en combinant le code avec un ID de vérification.




FirebaseAuth( 9470): [SmsRetrieverHelper] SMS verification code request failed: unknown status code: 17052 Exceeded per phone number quota for sending verification codes.