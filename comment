La verifyPhoneNumber()méthode qui se trouve à l'intérieur de la firebase_authdépendance générera l'otp et l'enverra à l'appareil. 
Il faut plusieurs rappels, le premier verificationCompletedsera invoqué dans les deux cas suivants :


1 - Vérification instantanée. Dans certains cas, le numéro de téléphone peut être vérifié instantanément sans qu'il soit nécessaire d'envoyer ou de saisir un code de vérification.

2 - Récupération automatique. Sur certains appareils, les services Google Play peuvent détecter automatiquement le SMS de vérification entrant et effectuer la vérification sans intervention de l'utilisateur.

Le rappel prendra a PhoneAuthCredentialcomme argument, qui contiendra le smsCode, puis en utilisant setState()nous mettrons à jour la valeur du TextFormFieldcontenant le otp.

Ensuite, puisque l'utilisateur est déjà connecté, nous utilisons linkWithCredential()pour lier à la fois les informations d'identification du téléphone et d'un autre fournisseur,
 et si cela génère l'erreur e.code == 'provider-already-linked', le téléphone sera déjà lié, nous nous connectons donc simplement et naviguons vers le fichier HomePage().

Le verificationFailedrappel sera appelé chaque fois qu'une erreur se produit, nous utilisons donc le showMessage()pour montrer l'erreur à l'utilisateur.

Le codeSentrappel sera appelé lorsque le code de vérification par SMS aura été envoyé au numéro de téléphone fourni. Ensuite, nous enregistrons le verificationIdafin que nous puissions construire un identifiant plus tard en combinant le code avec un ID de vérification.

un programme python qui prend en

exercice 2
ecrire un programme python qui prend en argument une liste de benefice etablie par une entreprise par mois. a chaque imdex est a
est associee le benefice d'un mois.
ca renvoit l'intervalle du mois pendant lequel l'entreprise a etabli plus de benefice


exercice1
**av** avant la voyelle si la chaine contient une voyelle
s'il ya deux voyelles consevutives, ca ajoute av avant la premiere voyelle. el la ndeuxieme reste inchangee


3.9119924,11.4810984,14.25
3.9119924,11.4810984,14.25
3.9168038!4d11.5215348
3.9264793!4d11.5202084
3.8887996!4d11.4900041
3.8667864!4d11.5006548


FirebaseAuth( 9470): [SmsRetrieverHelper] SMS verification code request failed: unknown status code: 17052 Exceeded per phone number quota for sending verification codes.


// ignore_for_file: non_constant_identifier_names
//dans le manager home

 /* getcurrentUser() async {
    print('domkam orlane ${widget.currentManagerID}');
    await ServiceUser.getUserbyId(widget.currentManagerID).then((value) {
      setState(() {
       currentManager = value;
        print('currrent user $currentManager');
      });
    });
  }*/

//positin du manager
  /* _ManagerPosition() async {
    print('curent usermanagerposition ${this.currentManager}');
    await ServiceUser.getUserbyId(widget.currentManagerID).then((value) {
      setState(() {
        currentManager = value;
        print('currrent user $currentManager');
      });
    });

    await ServicePosition.getPosition('${currentManager.idPosition}').then(
      (value) {
        setState(() {
          // this.x = value;
          currentManagerPosition = LatLng(value.latitude, value.longitude);
        });
        print(
            "dans le then la latitude manager est ${currentManagerPosition.latitude}, et sa longitude est ${currentManagerPosition.longitude}");
      },
    );
    print(
        "la latitude du manager est ${currentManagerPosition.latitude}, et sa longitude est ${currentManagerPosition.longitude}");
  }*/

  /*_DeliverPosition() async {
    // print(' le nombre identifiant est ${this._listDeliver()}');
    await ServicePosition.getPosition('${this.exampleModel!.idPosition}').then(
      (value) {
        setState(() {
          this.xdeliver = value;
          this.ydeliver = LatLng(xdeliver.latitude, xdeliver.longitude);
        });
        print(
            "dans le then la latitude Deliver est ${ydeliver.latitude}, et sa longitude est ${ydeliver.longitude}");
      },
    );
    print(
        "la latitude du Deliver est ${ydeliver.latitude}, et sa longitude est ${ydeliver.longitude}");
  }*/

  /* _currentDeliver() async {
    // print('teste user !!!111 ');
    await ServiceUser.getUserbyId("OCrk7Ov4pIZXabNqnyMU").then((value) {
      setState(() {
        this.exampleModel = value;
      });
    });

    print('dikongue ${this.exampleModel}');
  }*/


4.002709, 9.760013  8iUxmn1QtqPFNuWaHmTq

4.051313245736643, 9.768330036581581 KyPPUgZytPz5DXcqjWDv

  /*  getDirections() async {
    List<LatLng> polylineCoordinates = [];

//Obtenez la liste des points par Geo-coordinate, cela renvoie une instance de PolylineResult,
//qui contient le statut de l'api, le errorMessage et la liste des points décodés.
    PolylineResult result = await polylinePoints.getRouteBetweenCoordinates(
      googleAPiKey = "AIzaSyDMvPHsbM0l51gW4shfWTHMUD-8Df-2UKU",
      PointLatLng(positionDeliver.latitude, positionDeliver.longitude),
      PointLatLng(positionDeliver.latitude, positionDeliver.longitude),
      travelMode: TravelMode.driving,
      // travelMode: TravelMode.transit,
    );
    // inserer la liste de points reperes sur google map dans le tableau polylineCoordinates
    if (result.points.isNotEmpty) {
      result.points.forEach((PointLatLng point) {
        polylineCoordinates.add(LatLng(point.latitude, point.longitude));
      });
    } else {
      print(result.errorMessage);
    }
// appel de la gonction addPolyLine sur la liste de points
    addPolyLine(polylineCoordinates);
  }*/

//colorier en couleur violet tous les points de la liste sur la Map
  /* addPolyLine(List<LatLng> polylineCoordinates) {
    PolylineId id = PolylineId('poly');
    Polyline polyline = Polyline(
      polylineId: id,
      color: Colors.deepPurpleAccent,
      points: polylineCoordinates,
      width: 8,
    );
    polylines[id] = polyline;
    setState(() {});
  }*/