La verifyPhoneNumber()méthode qui se trouve à l'intérieur de la firebase_authdépendance générera l'otp et l'enverra à l'appareil. 
Il faut plusieurs rappels, le premier verificationCompletedsera invoqué dans les deux cas suivants :


1 - Vérification instantanée. Dans certains cas, le numéro de téléphone peut être vérifié instantanément sans qu'il soit nécessaire d'envoyer ou de saisir un code de vérification.

2 - Récupération automatique. Sur certains appareils, les services Google Play peuvent détecter automatiquement le SMS de vérification entrant et effectuer la vérification sans intervention de l'utilisateur.

Le rappel prendra a PhoneAuthCredentialcomme argument, qui contiendra le smsCode, puis en utilisant setState()nous mettrons à jour la valeur du TextFormFieldcontenant le otp.

Ensuite, puisque l'utilisateur est déjà connecté, nous utilisons linkWithCredential()pour lier à la fois les informations d'identification du téléphone et d'un autre fournisseur,
 et si cela génère l'erreur e.code == 'provider-already-linked', le téléphone sera déjà lié, nous nous connectons donc simplement et naviguons vers le fichier HomePage().

Le verificationFailedrappel sera appelé chaque fois qu'une erreur se produit, nous utilisons donc le showMessage()pour montrer l'erreur à l'utilisateur.

Le codeSentrappel sera appelé lorsque le code de vérification par SMS aura été envoyé au numéro de téléphone fourni. Ensuite, nous enregistrons le verificationIdafin que nous puissions construire un identifiant plus tard en combinant le code avec un ID de vérification.

un programme python qui prend en

exercice 2
ecrire un programme python qui prend en argument une liste de benefice etablie par une entreprise par mois. a chaque imdex est a
est associee le benefice d'un mois.
ca renvoit l'intervalle du mois pendant lequel l'entreprise a etabli plus de benefice


exercice1
**av** avant la voyelle si la chaine contient une voyelle
s'il ya deux voyelles consevutives, ca ajoute av avant la premiere voyelle. el la ndeuxieme reste inchangee


3.9119924,11.4810984,14.25
3.9119924,11.4810984,14.25
3.9168038!4d11.5215348
3.9264793!4d11.5202084
3.8887996!4d11.4900041
3.8667864!4d11.5006548




void _showConfirmDialog(BuildContext context) {
  
    showDialog(
        context: context,
        builder: (context) {
          return AlertDialog(
              backgroundColor: Colors.white,
              title: Container(
                width: MediaQuery.of(context).size.width,
                margin: EdgeInsets.symmetric(horizontal: kDefaultPadding),
                child: Center(
                  child: Text(
                    "Confirmation",
                    style: GoogleFonts.poppins(
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                        color: Colors.grey,
                        //  color: Colors.white

                        //  backgroundColor: Colors.white
                        ),
                  ),
                ),
              ),
              content: Container(
                   child: Text( "Etes vous sur de vouloir supprimer ?")
                  ),
              actions: [
                FlatButton(
                    child: Text("Oui".toUpperCase(),
                        style: TextStyle(
                            color: Color.fromARGB(255, 240, 229, 240))),
                    padding: EdgeInsets.all(2),
                    minWidth: MediaQuery.of(context).size.width,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(5),
                    ),
                    color: Palette.primarySwatch
                        .shade400, //Color.fromARGB(255, 240, 229, 240),
                    //  textColor: kBackgroundColor,
                    onPressed: () async {
                      await CommandService()
                          .removeCommand(command.idCommand)
                          .then((value) {
                        Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => Tracking(
                                      Command: command,
                                      deliver: widget.deliver,
                                      manager: widget.manager,
                                    )));

                        //Navigator.pop(context);
                        (Fluttertoast.showToast(
                            msg: "suppression reussie",
                            toastLength: Toast.LENGTH_SHORT,
                            gravity: ToastGravity.BOTTOM,
                            timeInSecForIosWeb: 5,
                            backgroundColor: Colors.red,
                            textColor: Colors.white,
                            fontSize: 16.0));
                      }).catchError((onError) {
                        Navigator.pop(context);
                        (Fluttertoast.showToast(
                            msg: "echec de suppression",
                            toastLength: Toast.LENGTH_SHORT,
                            gravity: ToastGravity.BOTTOM,
                            timeInSecForIosWeb: 5,
                            backgroundColor: Colors.red,
                            textColor: Colors.white,
                            fontSize: 16.0));
                      });
                    } // passing true
                    ),
                SizedBox(height: 2 //MediaQuery.of(context).size.height * 0.1,
                    ),
                FlatButton(
                  child: Text(
                    "Non".toUpperCase(),
                    style: TextStyle(color: Color.fromARGB(255, 240, 229, 240)),
                  ),
                  padding: EdgeInsets.all(2),
                  minWidth: MediaQuery.of(context).size.width,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(5),
                  ),
                  color: Palette.primarySwatch.shade400, //,
                  //  textColor: kBackgroundColor,
                  onPressed: () async {
                  Navigator.pop(context);
                  },
                ),
              ]);
        });
  }






FirebaseAuth( 9470): [SmsRetrieverHelper] SMS verification code request failed: unknown status code: 17052 Exceeded per phone number quota for sending verification codes.


// ignore_for_file: non_constant_identifier_names
//dans le manager home

 /* getcurrentUser() async {
    print('domkam orlane ${widget.currentManagerID}');
    await ServiceUser.getUserbyId(widget.currentManagerID).then((value) {
      setState(() {
       currentManager = value;
        print('currrent user $currentManager');
      });
    });
  }*/

//positin du manager
  /* _ManagerPosition() async {
    print('curent usermanagerposition ${this.currentManager}');
    await ServiceUser.getUserbyId(widget.currentManagerID).then((value) {
      setState(() {
        currentManager = value;
        print('currrent user $currentManager');
      });
    });

    await ServicePosition.getPosition('${currentManager.idPosition}').then(
      (value) {
        setState(() {
          // this.x = value;
          currentManagerPosition = LatLng(value.latitude, value.longitude);
        });
        print(
            "dans le then la latitude manager est ${currentManagerPosition.latitude}, et sa longitude est ${currentManagerPosition.longitude}");
      },
    );
    print(
        "la latitude du manager est ${currentManagerPosition.latitude}, et sa longitude est ${currentManagerPosition.longitude}");
  }*/

  /*_DeliverPosition() async {
    // print(' le nombre identifiant est ${this._listDeliver()}');
    await ServicePosition.getPosition('${this.exampleModel!.idPosition}').then(
      (value) {
        setState(() {
          this.xdeliver = value;
          this.ydeliver = LatLng(xdeliver.latitude, xdeliver.longitude);
        });
        print(
            "dans le then la latitude Deliver est ${ydeliver.latitude}, et sa longitude est ${ydeliver.longitude}");
      },
    );
    print(
        "la latitude du Deliver est ${ydeliver.latitude}, et sa longitude est ${ydeliver.longitude}");
  }*/

  /* _currentDeliver() async {
    // print('teste user !!!111 ');
    await ServiceUser.getUserbyId("OCrk7Ov4pIZXabNqnyMU").then((value) {
      setState(() {
        this.exampleModel = value;
      });
    });

    print('dikongue ${this.exampleModel}');
  }*/


4.002709, 9.760013  8iUxmn1QtqPFNuWaHmTq

4.051313245736643, 9.768330036581581 KyPPUgZytPz5DXcqjWDv
57438675

  /*  getDirections() async {
    List<LatLng> polylineCoordinates = [];

//Obtenez la liste des points par Geo-coordinate, cela renvoie une instance de PolylineResult,
//qui contient le statut de l'api, le errorMessage et la liste des points décodés.
    PolylineResult result = await polylinePoints.getRouteBetweenCoordinates(
      googleAPiKey = "AIzaSyDMvPHsbM0l51gW4shfWTHMUD-8Df-2UKU",
      PointLatLng(positionDeliver.latitude, positionDeliver.longitude),
      PointLatLng(positionDeliver.latitude, positionDeliver.longitude),
      travelMode: TravelMode.driving,
      // travelMode: TravelMode.transit,
    );
    // inserer la liste de points reperes sur google map dans le tableau polylineCoordinates
    if (result.points.isNotEmpty) {
      result.points.forEach((PointLatLng point) {
        polylineCoordinates.add(LatLng(point.latitude, point.longitude));
      });
    } else {
      print(result.errorMessage);
    }
// appel de la gonction addPolyLine sur la liste de points
    addPolyLine(polylineCoordinates);
  }*/

//colorier en couleur violet tous les points de la liste sur la Map
  /* addPolyLine(List<LatLng> polylineCoordinates) {
    PolylineId id = PolylineId('poly');
    Polyline polyline = Polyline(
      polylineId: id,
      color: Colors.deepPurpleAccent,
      points: polylineCoordinates,
      width: 8,
    );
    polylines[id] = polyline;
    setState(() {});
  }*/


  /*// ignore_for_file: non_constant_identifier_names

import 'dart:math';
import 'package:autocomplete_textfield/autocomplete_textfield.dart';
import 'package:flutter_polyline_points/flutter_polyline_points.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:supply_app/components/models/Database_Model.dart';
import 'package:supply_app/components/screen/manager/tri_rapide.dart';
import 'package:supply_app/components/services/user_service.dart';
import 'package:supply_app/constants.dart';
import 'package:supply_app/palette.dart';

import '../../../services/position_service.dart';
import '../menu_content/nav_bar.dart';

class ManagerHome extends StatefulWidget {
  //UserModel currentManager;
  String currentManagerID;
  ManagerHome({required this.currentManagerID, Key? key}) : super(key: key);
  @override
  _ManagerHomeState createState() => _ManagerHomeState();
}

class _ManagerHomeState extends State<ManagerHome> {
  // initialisation du manager courant
  UserModel currentManager = new UserModel(name: 'fabiol');
  //var Deliver = Map<UserModel, double>();
  // var deliver = null;
  bool isdeliver = false;
  var hauteur, hauteur2;

  bool isDev = false;
//pour le appBar
  bool isSearching = false;
  var deliver = UserModel(name: 'audrey').toMap();
  var Dev = UserModel(name: 'audrey');
  Map<String, dynamic> tab = {
    'Deliver': UserModel(name: 'audrey'),
    'Distance': 0
  };

  List<Map<String, dynamic>> tableauJson = [];
  List<Map<String, dynamic>> tableauJsontrie = [];
  List<UserModel> DeliverSort = [];

  //  LatLng startLocation = LatLng(latCurrentManager,longCurrentManager);

  GoogleMapController? mapController; //controller pour Google map
  PolylinePoints polylinePoints = PolylinePoints();

  String googleAPiKey = "AIzaSyDma7ThRPGokuU_cJ2Q_qFvowIpK35RAPs"; //google api
  //Marker est un tableau qui contient toutes les positions representees sur la map

  final Set<Marker> markers = new Set(); //markers for google map
  // Map<PolylineId, Polyline> polylines = {}; //polylines to show direction

  UserModel? exampleModel = new UserModel(name: 'fabiol');

  UserService ServiceUser = new UserService();
  PositionService ServicePosition = new PositionService();
  //PositionModel x = new PositionModel(longitude: 0, latitude: 0);
  LatLng currentManagerPosition = new LatLng(0, 0);
  PositionModel xdeliver = new PositionModel(longitude: 0, latitude: 0);
  LatLng ydeliver = new LatLng(0, 0);

  //tableau des identifiants des position de tous les livreurs
  List<UserModel> exampleModelDeliver = [];
  //liste des positions de tous les livreurs
  List<LatLng> listecoordonnees = [];
  List<double> Distances = [];
  List<double> DistanceInter = [];

  @override
  void initState() {
    // _listDeliver();
    getUserPosition();
    // print(' audrey cyrielle moguem${widget.currentManagerID}');
    //  getDirections(); //fetch direction polylines from Google API/Draw polyline direction routes in Google Map
    super.initState();
  }

  /* _listDeliver() async {
    await ServiceUser.getDelivers().forEach((element) {
      setState(() {
        this.exampleModelDeliver = element;
      });

      print(
          "le nombre de livreur est exactement ${exampleModelDeliver.length}");
    });

    print("le nombre de livreur est ${exampleModelDeliver.length}");
    return exampleModelDeliver.length;
  } */

  //liste de posiition des livreur
  getUserPosition() async {
    LatLng coordonnees = new LatLng(0, 0);

    //get current manager and current manager position
    await ServiceUser.getUserbyId(widget.currentManagerID).then((value) {
      setState(() {
        currentManager = value;
        print('currrent user $currentManager');
      });
    });

    await ServicePosition.getPosition('${currentManager.idPosition}').then(
      (value) {
        setState(() {
          currentManagerPosition = LatLng(value.latitude, value.longitude);
        });
        print(
            "dans le then la latitude manager est ${currentManagerPosition.latitude}, et sa longitude est ${currentManagerPosition.longitude}");
      },
    );
    print(
        "la latitude du manager est ${currentManagerPosition.latitude}, et sa longitude est ${currentManagerPosition.longitude}");
    //end

//Maquer le manager courant
    markers.add(Marker(
      //add distination location marker
      markerId: MarkerId(ydeliver.toString()),
      position: currentManagerPosition,
      infoWindow: InfoWindow(
        //popup info
        title: 'ma position ',
        snippet: currentManager.name,
      ),
      icon: BitmapDescriptor.defaultMarker, //Icon for Marker
    ));

    //affiche la position du current manager
    print('curent usermanager position ${this.currentManager}');
    //recupere la liste de livreurs
    print('curent userposition ${this.currentManager}');
    await ServiceUser.getDelivers().forEach((element) async {
      //modifier la letat de la liste des livreurs
      setState(() {
        this.exampleModelDeliver = element;
      });

      var n = -1;
      //pour chaque livreur, on renvoie sa posion
      for (var i in this.exampleModelDeliver) {
        n++;
        await ServicePosition.getPosition(i.idPosition).then((value) {
          LatLng coordonnees = LatLng(value.latitude, value.longitude);

          print(
              'la coordonnees est actuellement la latitude:${coordonnees.latitude} et la longitude est :${coordonnees.longitude}');
          //modifier l'etat de la liste des positions de chaque livreurs et de la table des identifiants
          setState(() {
            listecoordonnees.add(coordonnees);
            print('la liste de coordonnees mise a jour est:$listecoordonnees');
            //mise a jour du tableau contenant les infos sur les livreurs et leur distance
            tableauJson.add({
              //json.decode9tableaujson[i]['Deliver']
              "Deliver": i.toMap(),
              "Distance": getDistance(this.currentManagerPosition, coordonnees)
            });
            print('lacoordonnees est:$coordonnees');
            print('le tableau json mise a jour est:$listecoordonnees');

            //  Deliver[i]=getDistanceBetween(this.currentManagerPosition, this.listecoordonnees)[n];

            /*   deliver = {
              "Deliver": i,
              "Distance": getDistance(
                      this.currentManagerPosition, coordonnees)
                  
            };*/

            //marquage sur la map de tous les livreurs contenus dans la precedente liste
            //-------------------------------------------
            markers.add(Marker(
                //add start location marker
                markerId: MarkerId(coordonnees.toString()),
                position: coordonnees,
                infoWindow: InfoWindow(
                  //popup info
                  title: 'Livreur ${i.name} ',
                  //le user name envoye depuis la page de validation
                  snippet:
                      ' situe a ${getDistance(this.currentManagerPosition, coordonnees)} km de vous',
                ),
                icon: BitmapDescriptor.defaultMarker,
                onTap: () {
                  setState(() {
                    isDev = false;
                    // deliver=DeliverSort[index];
                    // deliver = tableauJsontrie[index];
                    Dev = i;
                  });
                  Dev != UserModel(name: 'audrey')
                      ? isDev = true
                      : isDev = false;
                } //Icon for Marker
                ));

            print(
                'la tailles de liste des marqueurs est : ${markers.length} et les marqueurs sont : $markers');

            //marquage de tous les livreurs sur la map
            //-------------------------------------------
          });
        });
      }
      /*  setState(() {
       tableauJsontrie = TriRapidejson(table: tableauJson).QSort(0, n - 1) ;
      }); */
    });
  }

//widget final
  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    setState(() {
      this.hauteur = size.height * 0.53;
      this.hauteur2 = size.height * 0.3;
    });

    // final allDelivers = Provider.of<List<UserModel>>(context);
    var n = tableauJson.length;

    tableauJsontrie =
        tableauTrie(TriRapidejson(table: tableauJson).QSort(0, n - 1));
    // DeliverSort = listeTrie(tableauJsontrie);
    print('les distances sont :${exampleModelDeliver}');

    print('la table json esst $tableauJson');
    print('le tableau json trie est ${tableauJsontrie.length}');
    /* print(
        'la liste des distance et livreurs associees est ${TriRapide(table: this.DistanceInter).tableauTrie(this.Distances)}');
 */
    return Scaffold(
      drawer: NavBar(), //Visibility(visible: isVisible(), child: NavBar()),
      appBar: AppBar(
        backgroundColor: kPrimaryColor,
        //   backgroundColor: Colors.transparent,
        title: /* !isSearching
                  ? Text(
                      'Mon application',
                      style: GoogleFonts.philosopher(fontSize: 20),
                    )
                  : */
            Text('Mon application'),
        actions: [
          IconButton(
            onPressed: () {
              showSearch(
                context: context,
                delegate: MysearchDelegate(
                    tableauJsontrie: tableauJsontrie,
                    hintText: " rechercher un livreur"),
              );
            },
            icon: const Icon(Icons.search),
          )
        ],
      ),
      /*   TextField(
            decoration: InputDecoration(
              /*  icon: Icon(
                  Icons.search,
                  color: Colors.white,
                  size: 26,
                ), */
              hintText: "Rechercher un livreur",
              hintStyle: TextStyle(color: Colors.white70),
              // fillColor: kPrimaryColor
            ),
          ),
          //visibilite des elements de la appbar
          actions: <Widget>[
            // !isSearching ?
            Visibility(
              visible: isVisible(),
              child: Padding(
                  padding: EdgeInsets.only(right: 10.0),
                  child: IconButton(
                    icon: Icon(
                      Icons.search,
                      size: 26,
                    ),
                    onPressed: () {
                      setState(() {
                        this.isSearching = !this.isSearching;
                      });
                    },
                  )),
            ),
            /*  Visibility(
              visible: isVisible(),
              child: Padding(
                  padding: EdgeInsets.only(right: 10.0),
                  child: GestureDetector(
                    onTap: () {},
                    child: Icon(Icons.more_vert),
                  )),
            ), */
          ]), */
      body: /* SingleChildScrollView(
        child: */
          Column(
        children: [
          Container(
            height: size.height * 0.42,
            //height: size.height,
            child: GoogleMap(
              zoomGesturesEnabled: true, //enable Zoom in, out on map
              mapType: MapType.normal,
              myLocationEnabled: true,
              initialCameraPosition: CameraPosition(
                target: this.currentManagerPosition,
                zoom: 10,
              ),
              markers: this.markers, //markers to show on map
              // polylines: Set<Polyline>.of(polylines.values), //polyl
              onMapCreated: (GoogleMapController controller) {
                mapController = controller;
              },
            ),
          ),
          Container(
              height: size.height * 0.43,
              margin: const EdgeInsets.symmetric(vertical: kDefaultPadding / 5),
              child: Stack(
                children: [
                  Container(
                    width: size.width,
                    height: size.height * 0.08,
                    margin:
                        const EdgeInsets.symmetric(horizontal: kDefaultPadding),
                    child: Column(
                      children: [
                        Text(
                          'contacter un livreur ',
                          style: GoogleFonts.philosopher(
                              fontSize: 17, fontWeight: FontWeight.w600),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(
                          height: 5,
                        ),
                        Text(
                          'Economique, rapide et fiable',
                          style: GoogleFonts.poppins(
                              color: Colors.grey, fontSize: 13),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  ),
                  Positioned(
                    width: size.width,
                    top: 42,
                    bottom: 0,
                    right: 0,
                    //  child: SizedBox(
                    child: Container(
                      // height: size.height * 0.5,
                      child: Column(
                        //  mainAxisSize: MainAxisSize.min,
                        // mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        // scrollDirection: Axis.vertical,
                        children: [
                          Expanded(
                            // flex: 2,
                            child: ListView.builder(
                              //  shrinkWrap: true,
                              scrollDirection: Axis.horizontal,
                              // itemCount: allDelivers.length,
                              itemCount: this.tableauJsontrie.length,
                              //  itemCount: this.exampleModelDeliver.length,
                              itemBuilder: (BuildContext context, int index) {
                                return InkWell(
                                  child: Container(
                                    child: GetItem(index),
                                  ),
                                  onTap: () {
                                    setState(() {
                                      isdeliver = false;
                                      // deliver=DeliverSort[index];
                                      // deliver = tableauJsontrie[index];
                                      deliver = this.tableauJsontrie[index]
                                          ['Deliver'];
                                      tab = this.tableauJsontrie[index];
                                    });
                                    deliver != UserModel(name: 'audrey').toMap()
                                        ? isdeliver = true
                                        : isdeliver = false;
                                    print(
                                        'livreur est : $deliver et $isdeliver');
                                    if (deliver !=
                                        UserModel(name: 'audrey').toMap()) {
                                      isdeliver = true;
                                      setState(() {
                                        this.hauteur = size.height * 0.42;
                                        this.hauteur2 = size.height * 0.43;
                                      });
                                    } else {
                                      isdeliver = false;
                                    }
                                    print(
                                        'livreur est : $deliver et $isdeliver');
                                  },
                                );
                              },
                            ),
                          ),
                          Visibility(
                              visible: isdeliver,
                              child: Column(
                                children: [
                                  Align(
                                    alignment: Alignment.centerLeft,
                                    child: Container(
                                      margin: EdgeInsets.only(left: 10),
                                      padding: EdgeInsets.all(5),
                                      height: 40,
                                      width: size.width * 0.68,
                                      color: Color.fromARGB(255, 248, 246, 248),
                                      child: Text(
                                        'situe a ${tab['Distance']} km de vous',
                                        // Text('${tableauJsontrie[index]['Deliver']['name']}',
                                        style: GoogleFonts.poppins(
                                          fontWeight: FontWeight.w500,
                                          fontSize: 15,
                                        ),
                                      ),
                                    ),
                                  ),
                                  Row(
                                      mainAxisAlignment:
                                          MainAxisAlignment.center,
                                      children: [
                                        FlatButton(
                                          minWidth: size.width * 0.7,
                                          onPressed: () async {
                                            final prefs =
                                                await SharedPreferences
                                                    .getInstance();
                                            final showHome = prefs.getBool(
                                                    'isAuthenticated') ??
                                                false;
                                            final id =
                                                prefs.getString('id') ?? '';
                                            print(
                                                'identifiant est : $id et le home est $showHome');
                                          },
                                          padding: EdgeInsets.all(5),
                                          shape: RoundedRectangleBorder(
                                            borderRadius:
                                                BorderRadius.circular(5),
                                          ),
                                          color: kPrimaryColor,
                                          textColor: kBackgroundColor,
                                          child: Text(
                                            'CONFIRMER ${deliver['name']} '
                                                .toUpperCase(),
                                            //${this.exampleModelDeliver[index].name}',
                                            //${user.name} ',
                                            style: GoogleFonts.poppins(
                                                fontSize: 15),
                                          ),
                                        ),
                                        Container(
                                          width: size.width * 0.25,
                                          height: 40,
                                          decoration: BoxDecoration(
                                              border: Border.all(
                                                  width: 1,
                                                  color: Colors.white70),
                                              shape: BoxShape.circle,
                                              image: DecorationImage(
                                                  fit: BoxFit.cover,
                                                  image: AssetImage(
                                                      "assets/images/profil.png"))),
                                        ),
                                      ]),
                                ],
                              ))
                        ],
                      ),
                    ),
                  ),
                ],
              )),
          // )
        ],
      ),
      // ),
    );
  }

  Widget GetItem(int index) {
    Size size = MediaQuery.of(context).size;
    return Column(
      children: [
        Stack(children: [
          Container(
            margin: EdgeInsets.symmetric(horizontal: kDefaultPadding / 2),
            width: size.width * 0.25,
            height: size.width * 0.25,
            decoration: BoxDecoration(
                border: Border.all(width: 1, color: Colors.white),
                boxShadow: [
                  BoxShadow(
                      spreadRadius: 2,
                      blurRadius: 10,
                      color: Colors.black.withOpacity(0.1))
                ],
                shape: BoxShape.circle,
                image: DecorationImage(
                    fit: BoxFit.cover,
                    image: const AssetImage("assets/images/profil.png"))),
          ),
          Positioned(
            bottom: size.width * 0.14,
            right: size.width * 0.06,
            child: Container(
              height: 30,
              width: 30,
              decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  border: Border.all(width: 0, color: Colors.transparent),
                  //color: Colors.white),
                  color: kPrimaryColor,
                  image: DecorationImage(
                      fit: BoxFit.cover,
                      image: AssetImage('assets/images/profil.png')
                      //  image: AssetImage("${user.tool}")
                      )),
            ),
          )
        ]),
        // ),
        const SizedBox(
          height: 2,
        ),
        // Text( 'deliver.name'),
        //   Text('${this.exampleModelDeliver[index].name}',
        Text(tableauJsontrie[index]['Deliver']['name'],
            style:
                GoogleFonts.poppins(fontWeight: FontWeight.w500, fontSize: 15)),
        const SizedBox(
          height: 10,
        ),
        // Text( 'deliver.name'),

        //   isdeliver ? bottom(index) : Container(),
      ],
    );
  }

  Widget bottom(Map<String, dynamic> tab) {
    // Widget bottom(index) {
    Size size = MediaQuery.of(context).size;

    return Row(children: [
      FlatButton(
        minWidth: size.width * 0.7,
        onPressed: () {},
        padding: EdgeInsets.all(15),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(5),
        ),
        color: kPrimaryColor,
        textColor: kBackgroundColor,
        child: Text(
          'CONFIRMER ${tab['Deliver']['name']} ',
          //${this.exampleModelDeliver[index].name}',
          //${user.name} ',
          style: GoogleFonts.poppins(fontSize: 15),
        ),

        // width: size.width * 0.7 ,
        // child: FlatButton,
      ),
      SizedBox(
        width: 10,
      ),
      Container(
        height: 30,
        width: 30,
        decoration: BoxDecoration(
            border: Border.all(width: 1, color: Colors.white70),
            shape: BoxShape.circle,
            image: DecorationImage(
                fit: BoxFit.cover,
                image: AssetImage("assets/images/profil.png"))),
      ),
    ]);
  }

//pour le appbar
  bool isVisible() {
    if (isSearching == false) {
      return true;
    } else {
      return false;
    }
  }

  //calcul de la distance entre deux positions
  double calculateDistance(lat1, lon1, lat2, lon2) {
    var p = 0.017453292519943295;
    var a = 0.5 -
        cos((lat2 - lat1) * p) / 2 +
        cos(lat1 * p) * cos(lat2 * p) * (1 - cos((lon2 - lon1) * p)) / 2;
    var x = 12742 * asin(sqrt(a));
    return roundDouble(x, 2);
  }

  //fonction pour arrondir

  double roundDouble(double value, int places) {
    num mod = pow(10.0, places);
    return ((value * mod).round().toDouble() / mod);
  }

  //set height

//supprime les doublons dans une liste
  List<Map<String, dynamic>> tableauTrie(List<Map<String, dynamic>> table) {
    int i, j, k;
    var n = table.length;
    for (i = 0; i < n; i++) {
      for (j = i + 1; j < n;) {
        if (table[j]['Distance'] == table[i]['Distance'] &&
            table[j]['Deliver']['name'] == table[i]['Deliver']['name'] &&
            table[j]['Deliver']['adress'] == table[i]['Deliver']['adress']) {
          table.removeAt(j);
          n--;
        } else
          j++;
      }
    }
    return table;
  }

//fonction qui renvoie la dstance des livreurs par rapport a la position du gerant
  /* List<double> getDistanceBetween(
      LatLng currentManagerPosition, List<LatLng> positionDeliverList) {
    var dist;
    for (var i in positionDeliverList) {
      dist = calculateDistance(currentManagerPosition.latitude,
          currentManagerPosition.longitude, i.latitude, i.longitude);
      setState(() {
        DistanceInter.add(dist);
      });
    }
    var n = this.DistanceInter.length;
    setState(() {
      Distances = TriRapide(table: this.DistanceInter).QSort(0, n - 1);
    });
    //  return tableauTrie(Distances);
    return DistanceInter;
    // TriRapide(table: this.DistanceInter).tableauTrie(this.DistanceInter);
  } */

  double getDistance(
      LatLng currentManagerPosition, LatLng positionDeliverList) {
    var dist;

    dist = calculateDistance(
        currentManagerPosition.latitude,
        currentManagerPosition.longitude,
        positionDeliverList.latitude,
        positionDeliverList.longitude);

    //  return tableauTrie(Distances);
    return dist;
    // TriRapide(table: this.DistanceInter).tableauTrie(this.DistanceInter);
  }
}

class MysearchDelegate extends SearchDelegate {
  List<Map<String, dynamic>> tableauJsontrie;
  final String hintText;
  MysearchDelegate(
      {required this.tableauJsontrie, required this.hintText, Key? key});

  List<String> added = [];
  String currentText = "";
  GlobalKey<AutoCompleteTextFieldState<String>> key = GlobalKey();
   late SimpleAutoCompleteTextField textField;
  bool showWhichErrorText = false;

  @override
  String get searchFieldLabel => hintText;

  @override
  Widget? buildLeading(BuildContext context) => IconButton(
      onPressed: () {
        close(context, null);
      },
      icon: const Icon(Icons.arrow_back));

  @override
  List<Widget>? buildActions(BuildContext context) => [
        IconButton(
            onPressed: () {
              if (query.isEmpty) {
                close(context, null);
              } else {
                query = '';
              }
            },
            icon: const Icon(Icons.clear))
      ];

  @override
  Widget buildSuggestions(BuildContext context) {
    Size size = MediaQuery.of(context).size;

    List<String> liste = [];

    int i;
    int n = this.tableauJsontrie.length;

    for (i = 0; i < n; i++) {
      liste.add(this.tableauJsontrie[i]['Deliver']['name']);
    }
    List<String> sortedItem = liste
      ..sort(
          (item1, item2) => item1.toLowerCase().compareTo(item2.toLowerCase()));
    List<String> suggestions = sortedItem;
  //#########################################################################################
    _FirstPageState() {
       textField = SimpleAutoCompleteTextField(
          key: key,
          decoration:
              InputDecoration(errorText: "Beans", hintText: "Type something"),
          controller: TextEditingController(),
          suggestions: suggestions,
          textChanged: (text) => currentText = text,
          clearOnSubmit: true,
          textSubmitted: (text) => (text != "") ? added.add(text) : added);
    }


     //#########################################################################################

    return suggestions.length > 0
        ? Column(
            children: [
              Container(
                margin: EdgeInsets.symmetric(vertical: kDefaultPadding),
                // height: 10,
                child: Text('Tous les livreurs disponibles',
                    style: GoogleFonts.poppins(
                        fontSize: 15,
                        fontWeight: FontWeight.bold,
                        color: Color.fromARGB(255, 138, 130, 130))),
              ),
              Expanded(
                child: ListView.builder(
                  itemCount: suggestions.length,
                  itemBuilder: (context, index) {
                    final suggestion = suggestions[index];

                    return Column(
                      children: [
                        ListTile(
                          leading: CircleAvatar(
                            backgroundColor: kPrimaryColor,
                            radius: 28,
                            backgroundImage:
                                AssetImage("assets/images/profil.png"),
                          ),
                          title: Text(suggestion),
                          subtitle: Text(
                              'situe a ${getDistance(suggestion, this.tableauJsontrie)} km de vous'),
                          onTap: () {
                            print("suggestion est $suggestion");
                            query = suggestion;
                          },
                        ),
                        SizedBox(
                          height: 5,
                        ),
                      ],
                    );
                  },
                ),
                //  ),
              ),
              /*  Autocomplete<String>(
                  optionsBuilder: (TextEditingValue value) {
              // When the field is empty
              if (value.text.isEmpty) {
                return [];
              }

              // The logic to find out which ones should appear
              return suggestions.where((suggestion) =>
                  suggestion.toLowerCase().contains(value.text.toLowerCase()));
            },), */
            ],
          )
        : Container(
            height: size.height,
            width: size.width,
            alignment: Alignment.center,
            child: Text(
              "Aucun resultat ",
              style: GoogleFonts.poppins(
                  fontSize: 20,
                  //  fontWeight: FontWeight.bold,
                  color: Colors.grey

                  //  backgroundColor: Colors.white
                  ),
            ),
          );
    ;
  }

  @override
  Widget buildResults(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    List<String> liste = [];

    int i;
    int n = this.tableauJsontrie.length;

    for (i = 0; i < n; i++) {
      liste.add(this.tableauJsontrie[i]['Deliver']['name']);
    }
    List<String> sortedItem = liste
      ..sort(
          (item1, item2) => item1.toLowerCase().compareTo(item2.toLowerCase()));
    List<String> suggestions = sortedItem;

    List<String> matchQuery = [];
    for (var deliver in suggestions) {
      if (deliver.toLowerCase().contains(query.toLowerCase())) {
        matchQuery.add(deliver);
      }
    }

    return matchQuery.length > 0
        ? ListView.builder(
            itemCount: matchQuery.length,
            itemBuilder: (context, index) {
              var result = matchQuery[index];

              return Column(
                children: [
                  ListTile(
                    leading: CircleAvatar(
                      backgroundColor: kPrimaryColor,
                      radius: 28,
                      backgroundImage: AssetImage("assets/images/profil.png"),
                    ),
                    title: Text(result),
                    subtitle: Text(
                        'situe a ${getDistance(result, this.tableauJsontrie)} km de vous'),
                    onTap: () {
                      print("suggestion est $result");
                      query = result;
                      _showcommandDialog(context);
                    },
                  ),
                  SizedBox(
                    height: 5,
                  ),
                ],
              );
            },
          )
        : Container(
            height: size.height,
            width: size.width,
            alignment: Alignment.center,
            child: Text(
              "Aucun resultat ",
              style: GoogleFonts.poppins(
                  fontSize: 20,
                  //  fontWeight: FontWeight.bold,
                  color: Colors.grey

                  //  backgroundColor: Colors.white
                  ),
            ),
          );
  }

  void _showcommandDialog(BuildContext context) {
    showDialog(
        context: context,
        builder: (context) {
          return AlertDialog(
              backgroundColor: Palette.primarySwatch.shade400,
              title: Container(
                width: MediaQuery.of(context).size.width,
                margin: EdgeInsets.symmetric(horizontal: kDefaultPadding),
                child: Center(
                  child: Text(
                    "Publier une commande",
                    style: GoogleFonts.poppins(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: Colors.white

                        //  backgroundColor: Colors.white
                        ),
                  ),
                ),
              ),
              content: Text(
                'Le livreur $query est situe a ${getDistance(query, this.tableauJsontrie)} km de vous  ',
                style: GoogleFonts.poppins(fontSize: 15, color: Colors.white),
              ),
              actions: [
                TextButton(
                  child: Text("Publier"),
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                )
              ]);
        });
  }

  double getDistance(String query, List<Map<String, dynamic>> tableauJsontrie) {
    int n = tableauJsontrie.length;
    int i;
    double distance = 0.0;
    for (i = 0; i < n; i++) {
      if (tableauJsontrie[i]['Deliver']['name'].compareTo(query) == 0) {
        distance = tableauJsontrie[i]['Distance'];
        break;
      }
    }
    return distance;
  }

  auto(List<String> suggestions) {
    return Autocomplete<String>(
      optionsBuilder: (TextEditingValue value) {
        // When the field is empty
        if (value.text.isEmpty) {
          return [];
        }

        // The logic to find out which ones should appear
        return suggestions.where((suggestion) =>
            suggestion.toLowerCase().contains(value.text.toLowerCase()));
      },
    );
  }
}
 */